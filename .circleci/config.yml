# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#

save_javascript_cache: &save_javascript_cache
  save_cache:
    paths:
      - ~/cache/npm
      - node_modules
    key: v1-javascript-dependencies-{{ checksum "package.json" }}

restore_javascript_cache: &restore_javascript_cache
  restore_cache:
    keys:
      - v1-javascript-dependencies-{{ checksum "package.json" }}
      - v1-javascript-dependencies-

version: 2
jobs:
  test-javascript:
    docker:
      - image: circleci/node:8
    working_directory: ~/iodide
    environment:
      npm_config_cache: ~/cache/npm
    steps:
      - checkout
      - *restore_javascript_cache
      - run: rm -rf node_modules/*/.git
      - run: npm install
      - *save_javascript_cache
      - run: npm run lint
      - run: npm run build
      - run: npm run test -- --runInBand

  build:
    docker:
      - image: circleci/node:8
    working_directory: ~/iodide
    environment:
      npm_config_cache: ~/cache/npm
    steps:
      - checkout
      - *restore_javascript_cache
      - run: rm -rf node_modules/*/.git
      - run: npm install
      - *save_javascript_cache
      - run: npm run build
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: docker build -t app:build .
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: mkdir -p /tmp; docker save -o /tmp/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /tmp/docker.tar
            - Dockerfile
            - docker-compose.yml

  docs:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: sudo pip install mkdocs markdown-include
      - run:
          name: Build docs
          command: mkdocs build
      - add_ssh_keys:
          fingerprints:
            "e2:81:9f:89:ea:24:ed:8a:da:a9:38:3b:61:bc:03:c9"
      - deploy:
          name: Deploy
          command: |
            if [ $CIRCLE_BRANCH == "master" ]; then
              git remote add docs git@github.com:iodide-project/docs.git
              mkdocs gh-deploy --force --remote-name=docs --remote-branch=master --ignore-version
            fi

  test-server:
    machine:
      enable: true
    environment:
      DEVELOPMENT: 1
    steps:
      - checkout
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/docker.tar

      - run:
          name: Lint code
          command: |
            cp .env-dist .env
            make lint

      - run:
          name: Test Code
          command: |
            cp .env-dist .env
            # we need to wait for the db to come up
            docker-compose up -d
            docker-compose run server bash -c "while ! echo > /dev/tcp/db/5432 > /dev/null 2>&1; do sleep 1 && echo waiting for db; done"
            # we need to re-collect static as docker-compose mounts the checkout directory over what we have in the image
            chmod 777 . # make sure we have permission to write the files in our volume
            # run the actual tests
            make test

  deploy:
    docker:
      - image: circleci/node:8
    working_directory: ~/iodide
    environment:
      npm_config_cache: ~/cache/npm
    steps:
      - checkout
      - run: rm -rf node_modules/*/.git
      - run: npm install
      - run: npm run build
      - setup_remote_docker
      - run:
          name: Create version.json
          command: |
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      # We are not using the cached docker file here b/c we want the production
      # build to use only the required Python files.
      - run:
          name: Build Docker image
          command: docker build -t app:build --build-arg PIP_FILE=build.txt .
      - run:
          name: Push image to Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test-javascript:
          filters:
            tags:
              only: /.*/
      - build:
          filters:
            tags:
              only: /.*/
      - docs:
          filters:
            tags:
              only: /.*/
      - test-server:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - test-server
          filters:
            tags:
              only: /.*/
            branches:
              only: master
