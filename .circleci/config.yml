# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#

save_javascript_cache: &save_javascript_cache
  save_cache:
    paths:
      - ~/cache/npm
      - node_modules
    key: v1-javascript-dependencies-{{ checksum "package.json" }}

restore_javascript_cache: &restore_javascript_cache
  restore_cache:
    keys:
      - v1-javascript-dependencies-{{ checksum "package.json" }}
      - v1-javascript-dependencies-

version: 2
jobs:
  test-javascript:
    docker:
      - image: circleci/node:8
    working_directory: ~/iodide
    environment:
      npm_config_cache: ~/cache/npm
    steps:
      - checkout
      - *restore_javascript_cache
      - run: rm -rf node_modules/*/.git
      - run: npm install
      - *save_javascript_cache
      - run: npm run lint
      - run: npm run build
      - run: npm test

  build:
    docker:
      - image: circleci/node:8
    working_directory: ~/iodide
    environment:
      npm_config_cache: ~/cache/npm
    steps:
      - checkout
      - *restore_javascript_cache
      - run: rm -rf node_modules/*/.git
      - run: npm install
      - *save_javascript_cache
      - run: npm run build
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create version.json
          command: |
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Build Docker image
          command: docker build -t app:build .
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: mkdir -p /tmp; docker save -o /tmp/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /tmp/docker.tar
            - Dockerfile
            - docker-compose.yml

  test-server:
    machine:
      enable: true
    environment:
      DEVELOPMENT: 1
    steps:
      - checkout
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/docker.tar

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
            pip install --upgrade docker-compose

      - run:
          name: Test Code
          command: |
            cp .env-dist .env
            docker-compose up -d
            docker-compose run server bash -c "while ! echo > /dev/tcp/db/5432 > /dev/null 2>&1; do sleep 1 && echo waiting for db; done"
            make flake8
            make test

  deploy:
    docker:
      - image: docker:18.09.0-ce-tp6
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/docker.tar
      - run:
          name: Push image to Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docke push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test-javascript:
          filters:
            tags:
              only: /.*/
      - build:
          filters:
            tags:
              only: /.*/
      - test-server:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - test-server
          filters:
            tags:
              only: /.*/
            branches:
              only: master
